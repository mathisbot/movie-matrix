// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.1
//   protoc               v5.27.0
// source: movie.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "movie";

export interface Cast {
  id: number;
  name: string;
  role: string;
  profileUrl: string;
}

export interface Movie {
  id: number;
  title: string;
  overview: string;
  voteAverage: number;
  runtime: number;
  releaseDate: string;
  posterUrl?: string | undefined;
  backdropUrl?: string | undefined;
  casting: Cast[];
  genres: string[];
  userVote?: number | undefined;
}

export interface MoviePreview {
  id: number;
  title: string;
  posterUrl?: string | undefined;
  voteAverage: number;
}

export interface GetMovieRequest {
  id: number;
}

export interface GetMovieResponse {
  movie: Movie | undefined;
}

export interface SearchMovieRequest {
  query: string;
  limit: number;
}

export interface SearchMovieResponse {
  movies: MoviePreview[];
}

export interface GetPopularMoviesRequest {
  offset: number;
  limit: number;
  genre: string;
}

export interface GetPopularMoviesResponse {
  movies: MoviePreview[];
}

export interface GetRecommandedMoviesRequest {
  limit: number;
}

export interface GetRecommandedMoviesResponse {
  movies: MoviePreview[];
}

export interface VoteMovieRequest {
  movieId: number;
  vote: number;
}

export interface VoteMovieResponse {
}

export interface GetSimilarMoviesRequest {
  movieId: number;
  limit: number;
}

export interface GetSimilarMoviesResponse {
  movies: MoviePreview[];
}

function createBaseCast(): Cast {
  return { id: 0, name: "", role: "", profileUrl: "" };
}

export const Cast = {
  encode(message: Cast, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.profileUrl !== "") {
      writer.uint32(34).string(message.profileUrl);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Cast {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCast();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.profileUrl = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Cast {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      profileUrl: isSet(object.profileUrl) ? globalThis.String(object.profileUrl) : "",
    };
  },

  toJSON(message: Cast): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.profileUrl !== "") {
      obj.profileUrl = message.profileUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<Cast>): Cast {
    return Cast.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Cast>): Cast {
    const message = createBaseCast();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.role = object.role ?? "";
    message.profileUrl = object.profileUrl ?? "";
    return message;
  },
};

function createBaseMovie(): Movie {
  return {
    id: 0,
    title: "",
    overview: "",
    voteAverage: 0,
    runtime: 0,
    releaseDate: "",
    posterUrl: undefined,
    backdropUrl: undefined,
    casting: [],
    genres: [],
    userVote: undefined,
  };
}

export const Movie = {
  encode(message: Movie, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.overview !== "") {
      writer.uint32(26).string(message.overview);
    }
    if (message.voteAverage !== 0) {
      writer.uint32(37).float(message.voteAverage);
    }
    if (message.runtime !== 0) {
      writer.uint32(40).int32(message.runtime);
    }
    if (message.releaseDate !== "") {
      writer.uint32(50).string(message.releaseDate);
    }
    if (message.posterUrl !== undefined) {
      writer.uint32(58).string(message.posterUrl);
    }
    if (message.backdropUrl !== undefined) {
      writer.uint32(66).string(message.backdropUrl);
    }
    for (const v of message.casting) {
      Cast.encode(v!, writer.uint32(74).fork()).ldelim();
    }
    for (const v of message.genres) {
      writer.uint32(82).string(v!);
    }
    if (message.userVote !== undefined) {
      writer.uint32(93).float(message.userVote);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Movie {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovie();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.overview = reader.string();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.voteAverage = reader.float();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.runtime = reader.int32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.releaseDate = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.posterUrl = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.backdropUrl = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.casting.push(Cast.decode(reader, reader.uint32()));
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.genres.push(reader.string());
          continue;
        case 11:
          if (tag !== 93) {
            break;
          }

          message.userVote = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Movie {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      overview: isSet(object.overview) ? globalThis.String(object.overview) : "",
      voteAverage: isSet(object.voteAverage) ? globalThis.Number(object.voteAverage) : 0,
      runtime: isSet(object.runtime) ? globalThis.Number(object.runtime) : 0,
      releaseDate: isSet(object.releaseDate) ? globalThis.String(object.releaseDate) : "",
      posterUrl: isSet(object.posterUrl) ? globalThis.String(object.posterUrl) : undefined,
      backdropUrl: isSet(object.backdropUrl) ? globalThis.String(object.backdropUrl) : undefined,
      casting: globalThis.Array.isArray(object?.casting) ? object.casting.map((e: any) => Cast.fromJSON(e)) : [],
      genres: globalThis.Array.isArray(object?.genres) ? object.genres.map((e: any) => globalThis.String(e)) : [],
      userVote: isSet(object.userVote) ? globalThis.Number(object.userVote) : undefined,
    };
  },

  toJSON(message: Movie): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.overview !== "") {
      obj.overview = message.overview;
    }
    if (message.voteAverage !== 0) {
      obj.voteAverage = message.voteAverage;
    }
    if (message.runtime !== 0) {
      obj.runtime = Math.round(message.runtime);
    }
    if (message.releaseDate !== "") {
      obj.releaseDate = message.releaseDate;
    }
    if (message.posterUrl !== undefined) {
      obj.posterUrl = message.posterUrl;
    }
    if (message.backdropUrl !== undefined) {
      obj.backdropUrl = message.backdropUrl;
    }
    if (message.casting?.length) {
      obj.casting = message.casting.map((e) => Cast.toJSON(e));
    }
    if (message.genres?.length) {
      obj.genres = message.genres;
    }
    if (message.userVote !== undefined) {
      obj.userVote = message.userVote;
    }
    return obj;
  },

  create(base?: DeepPartial<Movie>): Movie {
    return Movie.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Movie>): Movie {
    const message = createBaseMovie();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.overview = object.overview ?? "";
    message.voteAverage = object.voteAverage ?? 0;
    message.runtime = object.runtime ?? 0;
    message.releaseDate = object.releaseDate ?? "";
    message.posterUrl = object.posterUrl ?? undefined;
    message.backdropUrl = object.backdropUrl ?? undefined;
    message.casting = object.casting?.map((e) => Cast.fromPartial(e)) || [];
    message.genres = object.genres?.map((e) => e) || [];
    message.userVote = object.userVote ?? undefined;
    return message;
  },
};

function createBaseMoviePreview(): MoviePreview {
  return { id: 0, title: "", posterUrl: undefined, voteAverage: 0 };
}

export const MoviePreview = {
  encode(message: MoviePreview, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.posterUrl !== undefined) {
      writer.uint32(26).string(message.posterUrl);
    }
    if (message.voteAverage !== 0) {
      writer.uint32(37).float(message.voteAverage);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MoviePreview {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoviePreview();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.posterUrl = reader.string();
          continue;
        case 4:
          if (tag !== 37) {
            break;
          }

          message.voteAverage = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoviePreview {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      posterUrl: isSet(object.posterUrl) ? globalThis.String(object.posterUrl) : undefined,
      voteAverage: isSet(object.voteAverage) ? globalThis.Number(object.voteAverage) : 0,
    };
  },

  toJSON(message: MoviePreview): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.posterUrl !== undefined) {
      obj.posterUrl = message.posterUrl;
    }
    if (message.voteAverage !== 0) {
      obj.voteAverage = message.voteAverage;
    }
    return obj;
  },

  create(base?: DeepPartial<MoviePreview>): MoviePreview {
    return MoviePreview.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MoviePreview>): MoviePreview {
    const message = createBaseMoviePreview();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.posterUrl = object.posterUrl ?? undefined;
    message.voteAverage = object.voteAverage ?? 0;
    return message;
  },
};

function createBaseGetMovieRequest(): GetMovieRequest {
  return { id: 0 };
}

export const GetMovieRequest = {
  encode(message: GetMovieRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMovieRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMovieRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMovieRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetMovieRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<GetMovieRequest>): GetMovieRequest {
    return GetMovieRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMovieRequest>): GetMovieRequest {
    const message = createBaseGetMovieRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetMovieResponse(): GetMovieResponse {
  return { movie: undefined };
}

export const GetMovieResponse = {
  encode(message: GetMovieResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.movie !== undefined) {
      Movie.encode(message.movie, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetMovieResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMovieResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.movie = Movie.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMovieResponse {
    return { movie: isSet(object.movie) ? Movie.fromJSON(object.movie) : undefined };
  },

  toJSON(message: GetMovieResponse): unknown {
    const obj: any = {};
    if (message.movie !== undefined) {
      obj.movie = Movie.toJSON(message.movie);
    }
    return obj;
  },

  create(base?: DeepPartial<GetMovieResponse>): GetMovieResponse {
    return GetMovieResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetMovieResponse>): GetMovieResponse {
    const message = createBaseGetMovieResponse();
    message.movie = (object.movie !== undefined && object.movie !== null) ? Movie.fromPartial(object.movie) : undefined;
    return message;
  },
};

function createBaseSearchMovieRequest(): SearchMovieRequest {
  return { query: "", limit: 0 };
}

export const SearchMovieRequest = {
  encode(message: SearchMovieRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SearchMovieRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchMovieRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchMovieRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: SearchMovieRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<SearchMovieRequest>): SearchMovieRequest {
    return SearchMovieRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchMovieRequest>): SearchMovieRequest {
    const message = createBaseSearchMovieRequest();
    message.query = object.query ?? "";
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseSearchMovieResponse(): SearchMovieResponse {
  return { movies: [] };
}

export const SearchMovieResponse = {
  encode(message: SearchMovieResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.movies) {
      MoviePreview.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SearchMovieResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchMovieResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.movies.push(MoviePreview.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchMovieResponse {
    return {
      movies: globalThis.Array.isArray(object?.movies) ? object.movies.map((e: any) => MoviePreview.fromJSON(e)) : [],
    };
  },

  toJSON(message: SearchMovieResponse): unknown {
    const obj: any = {};
    if (message.movies?.length) {
      obj.movies = message.movies.map((e) => MoviePreview.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SearchMovieResponse>): SearchMovieResponse {
    return SearchMovieResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchMovieResponse>): SearchMovieResponse {
    const message = createBaseSearchMovieResponse();
    message.movies = object.movies?.map((e) => MoviePreview.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetPopularMoviesRequest(): GetPopularMoviesRequest {
  return { offset: 0, limit: 0, genre: "" };
}

export const GetPopularMoviesRequest = {
  encode(message: GetPopularMoviesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.offset !== 0) {
      writer.uint32(8).int32(message.offset);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.genre !== "") {
      writer.uint32(26).string(message.genre);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPopularMoviesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPopularMoviesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.offset = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.genre = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPopularMoviesRequest {
    return {
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      genre: isSet(object.genre) ? globalThis.String(object.genre) : "",
    };
  },

  toJSON(message: GetPopularMoviesRequest): unknown {
    const obj: any = {};
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.genre !== "") {
      obj.genre = message.genre;
    }
    return obj;
  },

  create(base?: DeepPartial<GetPopularMoviesRequest>): GetPopularMoviesRequest {
    return GetPopularMoviesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPopularMoviesRequest>): GetPopularMoviesRequest {
    const message = createBaseGetPopularMoviesRequest();
    message.offset = object.offset ?? 0;
    message.limit = object.limit ?? 0;
    message.genre = object.genre ?? "";
    return message;
  },
};

function createBaseGetPopularMoviesResponse(): GetPopularMoviesResponse {
  return { movies: [] };
}

export const GetPopularMoviesResponse = {
  encode(message: GetPopularMoviesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.movies) {
      MoviePreview.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetPopularMoviesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPopularMoviesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.movies.push(MoviePreview.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPopularMoviesResponse {
    return {
      movies: globalThis.Array.isArray(object?.movies) ? object.movies.map((e: any) => MoviePreview.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetPopularMoviesResponse): unknown {
    const obj: any = {};
    if (message.movies?.length) {
      obj.movies = message.movies.map((e) => MoviePreview.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetPopularMoviesResponse>): GetPopularMoviesResponse {
    return GetPopularMoviesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetPopularMoviesResponse>): GetPopularMoviesResponse {
    const message = createBaseGetPopularMoviesResponse();
    message.movies = object.movies?.map((e) => MoviePreview.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetRecommandedMoviesRequest(): GetRecommandedMoviesRequest {
  return { limit: 0 };
}

export const GetRecommandedMoviesRequest = {
  encode(message: GetRecommandedMoviesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.limit !== 0) {
      writer.uint32(8).int32(message.limit);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetRecommandedMoviesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRecommandedMoviesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.limit = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRecommandedMoviesRequest {
    return { limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0 };
  },

  toJSON(message: GetRecommandedMoviesRequest): unknown {
    const obj: any = {};
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<GetRecommandedMoviesRequest>): GetRecommandedMoviesRequest {
    return GetRecommandedMoviesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRecommandedMoviesRequest>): GetRecommandedMoviesRequest {
    const message = createBaseGetRecommandedMoviesRequest();
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseGetRecommandedMoviesResponse(): GetRecommandedMoviesResponse {
  return { movies: [] };
}

export const GetRecommandedMoviesResponse = {
  encode(message: GetRecommandedMoviesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.movies) {
      MoviePreview.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetRecommandedMoviesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRecommandedMoviesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.movies.push(MoviePreview.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRecommandedMoviesResponse {
    return {
      movies: globalThis.Array.isArray(object?.movies) ? object.movies.map((e: any) => MoviePreview.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetRecommandedMoviesResponse): unknown {
    const obj: any = {};
    if (message.movies?.length) {
      obj.movies = message.movies.map((e) => MoviePreview.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetRecommandedMoviesResponse>): GetRecommandedMoviesResponse {
    return GetRecommandedMoviesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRecommandedMoviesResponse>): GetRecommandedMoviesResponse {
    const message = createBaseGetRecommandedMoviesResponse();
    message.movies = object.movies?.map((e) => MoviePreview.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVoteMovieRequest(): VoteMovieRequest {
  return { movieId: 0, vote: 0 };
}

export const VoteMovieRequest = {
  encode(message: VoteMovieRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.movieId !== 0) {
      writer.uint32(8).int32(message.movieId);
    }
    if (message.vote !== 0) {
      writer.uint32(21).float(message.vote);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VoteMovieRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteMovieRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.movieId = reader.int32();
          continue;
        case 2:
          if (tag !== 21) {
            break;
          }

          message.vote = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VoteMovieRequest {
    return {
      movieId: isSet(object.movieId) ? globalThis.Number(object.movieId) : 0,
      vote: isSet(object.vote) ? globalThis.Number(object.vote) : 0,
    };
  },

  toJSON(message: VoteMovieRequest): unknown {
    const obj: any = {};
    if (message.movieId !== 0) {
      obj.movieId = Math.round(message.movieId);
    }
    if (message.vote !== 0) {
      obj.vote = message.vote;
    }
    return obj;
  },

  create(base?: DeepPartial<VoteMovieRequest>): VoteMovieRequest {
    return VoteMovieRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VoteMovieRequest>): VoteMovieRequest {
    const message = createBaseVoteMovieRequest();
    message.movieId = object.movieId ?? 0;
    message.vote = object.vote ?? 0;
    return message;
  },
};

function createBaseVoteMovieResponse(): VoteMovieResponse {
  return {};
}

export const VoteMovieResponse = {
  encode(_: VoteMovieResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VoteMovieResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVoteMovieResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): VoteMovieResponse {
    return {};
  },

  toJSON(_: VoteMovieResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<VoteMovieResponse>): VoteMovieResponse {
    return VoteMovieResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<VoteMovieResponse>): VoteMovieResponse {
    const message = createBaseVoteMovieResponse();
    return message;
  },
};

function createBaseGetSimilarMoviesRequest(): GetSimilarMoviesRequest {
  return { movieId: 0, limit: 0 };
}

export const GetSimilarMoviesRequest = {
  encode(message: GetSimilarMoviesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.movieId !== 0) {
      writer.uint32(8).int32(message.movieId);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSimilarMoviesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSimilarMoviesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.movieId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSimilarMoviesRequest {
    return {
      movieId: isSet(object.movieId) ? globalThis.Number(object.movieId) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: GetSimilarMoviesRequest): unknown {
    const obj: any = {};
    if (message.movieId !== 0) {
      obj.movieId = Math.round(message.movieId);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSimilarMoviesRequest>): GetSimilarMoviesRequest {
    return GetSimilarMoviesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSimilarMoviesRequest>): GetSimilarMoviesRequest {
    const message = createBaseGetSimilarMoviesRequest();
    message.movieId = object.movieId ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseGetSimilarMoviesResponse(): GetSimilarMoviesResponse {
  return { movies: [] };
}

export const GetSimilarMoviesResponse = {
  encode(message: GetSimilarMoviesResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.movies) {
      MoviePreview.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSimilarMoviesResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSimilarMoviesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.movies.push(MoviePreview.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSimilarMoviesResponse {
    return {
      movies: globalThis.Array.isArray(object?.movies) ? object.movies.map((e: any) => MoviePreview.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetSimilarMoviesResponse): unknown {
    const obj: any = {};
    if (message.movies?.length) {
      obj.movies = message.movies.map((e) => MoviePreview.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetSimilarMoviesResponse>): GetSimilarMoviesResponse {
    return GetSimilarMoviesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSimilarMoviesResponse>): GetSimilarMoviesResponse {
    const message = createBaseGetSimilarMoviesResponse();
    message.movies = object.movies?.map((e) => MoviePreview.fromPartial(e)) || [];
    return message;
  },
};

export type MovieServiceDefinition = typeof MovieServiceDefinition;
export const MovieServiceDefinition = {
  name: "MovieService",
  fullName: "movie.MovieService",
  methods: {
    getMovie: {
      name: "GetMovie",
      requestType: GetMovieRequest,
      requestStream: false,
      responseType: GetMovieResponse,
      responseStream: false,
      options: {},
    },
    searchMovie: {
      name: "SearchMovie",
      requestType: SearchMovieRequest,
      requestStream: false,
      responseType: SearchMovieResponse,
      responseStream: false,
      options: {},
    },
    getPopularMovies: {
      name: "GetPopularMovies",
      requestType: GetPopularMoviesRequest,
      requestStream: false,
      responseType: GetPopularMoviesResponse,
      responseStream: false,
      options: {},
    },
    getRecommandedMovies: {
      name: "GetRecommandedMovies",
      requestType: GetRecommandedMoviesRequest,
      requestStream: false,
      responseType: GetRecommandedMoviesResponse,
      responseStream: false,
      options: {},
    },
    voteMovie: {
      name: "VoteMovie",
      requestType: VoteMovieRequest,
      requestStream: false,
      responseType: VoteMovieResponse,
      responseStream: false,
      options: {},
    },
    getSimilarMovies: {
      name: "GetSimilarMovies",
      requestType: GetSimilarMoviesRequest,
      requestStream: false,
      responseType: GetSimilarMoviesResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface MovieServiceImplementation<CallContextExt = {}> {
  getMovie(request: GetMovieRequest, context: CallContext & CallContextExt): Promise<DeepPartial<GetMovieResponse>>;
  searchMovie(
    request: SearchMovieRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SearchMovieResponse>>;
  getPopularMovies(
    request: GetPopularMoviesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetPopularMoviesResponse>>;
  getRecommandedMovies(
    request: GetRecommandedMoviesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetRecommandedMoviesResponse>>;
  voteMovie(request: VoteMovieRequest, context: CallContext & CallContextExt): Promise<DeepPartial<VoteMovieResponse>>;
  getSimilarMovies(
    request: GetSimilarMoviesRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetSimilarMoviesResponse>>;
}

export interface MovieServiceClient<CallOptionsExt = {}> {
  getMovie(request: DeepPartial<GetMovieRequest>, options?: CallOptions & CallOptionsExt): Promise<GetMovieResponse>;
  searchMovie(
    request: DeepPartial<SearchMovieRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SearchMovieResponse>;
  getPopularMovies(
    request: DeepPartial<GetPopularMoviesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetPopularMoviesResponse>;
  getRecommandedMovies(
    request: DeepPartial<GetRecommandedMoviesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetRecommandedMoviesResponse>;
  voteMovie(request: DeepPartial<VoteMovieRequest>, options?: CallOptions & CallOptionsExt): Promise<VoteMovieResponse>;
  getSimilarMovies(
    request: DeepPartial<GetSimilarMoviesRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetSimilarMoviesResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
